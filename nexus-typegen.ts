/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LocationType: { // input type
    id: number; // Int!
    lat: string; // String!
    lon: string; // String!
    name: string; // String!
  }
  PhotoEditType: { // input type
    photoId: string; // String!
    tags: NexusGenInputs['TagInputType'][]; // [TagInputType!]!
  }
  PhotoInputType: { // input type
    photoString: string; // String!
    tags?: NexusGenInputs['TagInputType'][] | null; // [TagInputType!]
  }
  PostOrderBy: { // input type
    createdAt?: NexusGenEnums['Sort'] | null; // Sort
  }
  TagInputType: { // input type
    userId: string; // String!
    username?: string | null; // String
    x: number; // Float!
    y: number; // Float!
  }
}

export interface NexusGenEnums {
  Sort: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Activity: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isRead: boolean; // Boolean!
    type: string; // String!
  }
  ActivityCount: { // root type
    comments: number; // Int!
    followRequests: number; // Int!
    follows: number; // Int!
    id: string; // String!
    likes: number; // Int!
    sum: number; // Int!
    tagged: number; // Int!
    totalFollowRequests: number; // Int!
  }
  ActivityPage: { // root type
    activity: NexusGenRootTypes['Activity'][]; // [Activity!]!
    followRequests?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    id?: string | null; // ID
    isNextPage?: boolean | null; // Boolean
  }
  AuthPayload: { // root type
    accessToken: string; // String!
  }
  Chat: { // root type
    createdById: string; // String!
    id: string; // String!
    name?: string | null; // String
  }
  ChatsPage: { // root type
    chats?: Array<NexusGenRootTypes['Chat'] | null> | null; // [Chat]
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
  }
  CollectedPost: { // root type
    collectionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    postId: string; // String!
  }
  Collection: { // root type
    createdById: string; // String!
    id: string; // String!
    name: string; // String!
    nameLink: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CollectionAndPosts: { // root type
    collection: NexusGenRootTypes['Collection']; // Collection!
    posts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
  }
  CollectionsPaged: { // root type
    collections: Array<NexusGenRootTypes['Collection'] | null>; // [Collection]!
    id: string; // String!
    isNextPage: boolean; // Boolean!
  }
  Comment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isEdited: boolean; // Boolean!
    postId: string; // String!
    postedById: string; // String!
    text: string; // String!
  }
  CommentLike: { // root type
    commentId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  CommentsPage: { // root type
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
  }
  EmailConfirmation: { // root type
    status: boolean; // Boolean!
  }
  Feed: { // root type
    count: number; // Int!
    id?: string | null; // ID
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
  FollowRequest: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    userReceiveId: string; // String!
    userRequestId: string; // String!
  }
  FollowingPosts: { // root type
    id: string; // ID!
    isNextPage: boolean; // Boolean!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Follows: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    followerId: string; // String!
    followingId: string; // String!
  }
  HashTagSearch: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hashTagName: string; // String!
    searchedById: string; // String!
  }
  Hashtag: { // root type
    id: string; // String!
    name: string; // String!
  }
  HiddenUser: { // root type
    userId: string; // String!
    viewerId: string; // String!
  }
  Like: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    postId: string; // String!
    userId: string; // String!
  }
  LikesPage: { // root type
    id?: string | null; // ID
    isNextPage?: boolean | null; // Boolean
    profiles?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Location: { // root type
    id: number; // Int!
    lat: string; // String!
    lon: string; // String!
    name: string; // String!
  }
  Message: { // root type
    chatId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    readAt?: NexusGenScalars['DateTime'] | null; // DateTime
    sticker?: string | null; // String
    text?: string | null; // String
    type?: string | null; // String
  }
  MessageLike: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    messageId: string; // String!
    reaction: string; // String!
    userId: string; // String!
  }
  MessageLikesPage: { // root type
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
    reactions?: Array<NexusGenRootTypes['MessageLike'] | null> | null; // [MessageLike]
  }
  MessagesPage: { // root type
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
    messages?: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
  }
  Mutation: {};
  MutualFollowers: { // root type
    count: number; // Int!
    id?: string | null; // ID
    users?: Array<NexusGenRootTypes['UserMini'] | null> | null; // [UserMini]
  }
  PageInfo: { // root type
    cursorId: string; // String!
    isNextPage: boolean; // Boolean!
  }
  PagedPosts: { // root type
    id: string; // ID!
    isNextPage: boolean; // Boolean!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Photo: { // root type
    aspectRatio: number; // Float!
    id: string; // String!
    postId?: string | null; // String
  }
  Post: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isEdited: boolean; // Boolean!
    locationId?: number | null; // Int
    postedById: string; // String!
    text: string; // String!
  }
  Query: {};
  RecentSearch: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hashTagName?: string | null; // String
    id?: string | null; // String
    userId?: string | null; // String
  }
  Reply: { // root type
    commentId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postId: string; // String!
    postedById: string; // String!
    text: string; // String!
  }
  ReplyLike: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    replyId: string; // String!
    userId: string; // String!
  }
  ReplyPage: { // root type
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
    replies?: Array<NexusGenRootTypes['Reply'] | null> | null; // [Reply]
  }
  SavedPost: { // root type
    postId: string; // String!
    savedAt: NexusGenScalars['DateTime']; // DateTime!
    savedById: string; // String!
  }
  SavedPostsPage: { // root type
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  SearchResult: { // root type
    hashTagId?: string | null; // String
    id: string; // String!
    userId?: string | null; // String
  }
  ShareList: { // root type
    chatId?: string | null; // String
    postId: string; // String!
    text: string; // String!
    userId?: string | null; // String
  }
  ShareSearch: { // root type
    userId?: string | null; // String
  }
  Subscription: {};
  Tag: { // root type
    photoId: string; // String!
    postId: string; // String!
    userId: string; // String!
    x: number; // Int!
    y: number; // Int!
  }
  TagsPage: { // root type
    id: string; // String!
    isNextPage: boolean; // Boolean!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Upload: { // root type
    success: boolean; // Boolean!
  }
  User: { // root type
    bio?: string | null; // String
    fullName?: string | null; // String
    gender?: string | null; // String
    id: string; // String!
    isPrivate: boolean; // Boolean!
    photoVersion?: number | null; // Int
    tokenVersion: number; // Int!
    url?: string | null; // String
    username: string; // String!
  }
  UserMini: { // root type
    fullName: string; // String!
    id: string; // String!
    photoVersion: number; // Int!
    username: string; // String!
  }
  UserSearch: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    searchedById: string; // String!
    userId: string; // String!
  }
  UsersListPage: { // root type
    id?: string | null; // String
    isNextPage?: boolean | null; // Boolean
    profiles?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  commentCounts: { // root type
    likes: number; // Int!
    replies: number; // Int!
  }
  confirmPassword: { // root type
    reset: boolean; // Boolean!
  }
  counts: { // root type
    followedBy: number; // Int!
    follows: number; // Int!
    id?: string | null; // ID
    media: number; // Int!
  }
  postCounts: { // root type
    comments: number; // Int!
    commentsOnly: number; // Int!
    likes: number; // Int!
  }
  sendReset: { // root type
    censoredEmail: string; // String!
  }
  verifyReset: { // root type
    verified: boolean; // Boolean!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Activity: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isRead: boolean; // Boolean!
    post: NexusGenRootTypes['Post'] | null; // Post
    receivedBy: NexusGenRootTypes['User'] | null; // User
    reply: NexusGenRootTypes['Reply'] | null; // Reply
    sentBy: NexusGenRootTypes['User'] | null; // User
    type: string; // String!
  }
  ActivityCount: { // field return type
    comments: number; // Int!
    followRequests: number; // Int!
    follows: number; // Int!
    id: string; // String!
    likes: number; // Int!
    sum: number; // Int!
    tagged: number; // Int!
    totalFollowRequests: number; // Int!
  }
  ActivityPage: { // field return type
    activity: NexusGenRootTypes['Activity'][]; // [Activity!]!
    activityCounts: NexusGenRootTypes['ActivityCount'] | null; // ActivityCount
    followRequests: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    id: string | null; // ID
    isNextPage: boolean | null; // Boolean
  }
  AuthPayload: { // field return type
    accessToken: string; // String!
  }
  Chat: { // field return type
    admins: Array<NexusGenRootTypes['User'] | null>; // [User]!
    createdBy: NexusGenRootTypes['User'] | null; // User
    createdById: string; // String!
    id: string; // String!
    isAdmin: boolean | null; // Boolean
    isRequest: boolean; // Boolean!
    lastestMessage: NexusGenRootTypes['Message'] | null; // Message
    members: Array<NexusGenRootTypes['User'] | null>; // [User]!
    messagesPage: NexusGenRootTypes['MessagesPage']; // MessagesPage!
    name: string | null; // String
  }
  ChatsPage: { // field return type
    chats: Array<NexusGenRootTypes['Chat'] | null> | null; // [Chat]
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
  }
  CollectedPost: { // field return type
    collection: NexusGenRootTypes['Collection'] | null; // Collection
    collectionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
  }
  Collection: { // field return type
    createdById: string; // String!
    id: string; // String!
    isCollected: boolean; // Boolean!
    name: string; // String!
    nameLink: string; // String!
    pagedPosts: NexusGenRootTypes['PagedPosts']; // PagedPosts!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CollectionAndPosts: { // field return type
    collection: NexusGenRootTypes['Collection']; // Collection!
    posts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
  }
  CollectionsPaged: { // field return type
    collections: Array<NexusGenRootTypes['Collection'] | null>; // [Collection]!
    id: string; // String!
    isNextPage: boolean; // Boolean!
  }
  Comment: { // field return type
    counts: NexusGenRootTypes['commentCounts']; // commentCounts!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isEdited: boolean; // Boolean!
    isLiked: boolean; // Boolean!
    likes: NexusGenRootTypes['LikesPage']; // LikesPage!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    postedBy: NexusGenRootTypes['User'] | null; // User
    postedById: string; // String!
    replyPage: NexusGenRootTypes['ReplyPage']; // ReplyPage!
    text: string; // String!
    uniqueReply: NexusGenRootTypes['Reply'] | null; // Reply
  }
  CommentLike: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    commentId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  CommentsPage: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
  }
  EmailConfirmation: { // field return type
    status: boolean; // Boolean!
  }
  Feed: { // field return type
    count: number; // Int!
    id: string | null; // ID
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
  FollowRequest: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    userReceive: NexusGenRootTypes['User'] | null; // User
    userReceiveId: string; // String!
    userRequest: NexusGenRootTypes['User'] | null; // User
    userRequestId: string; // String!
  }
  FollowingPosts: { // field return type
    id: string; // ID!
    isNextPage: boolean; // Boolean!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Follows: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    follower: NexusGenRootTypes['User'] | null; // User
    followerId: string; // String!
    following: NexusGenRootTypes['User'] | null; // User
    followingId: string; // String!
    id: string; // String!
  }
  HashTagSearch: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hashTag: NexusGenRootTypes['Hashtag'] | null; // Hashtag
    hashTagName: string; // String!
    searchedById: string; // String!
  }
  Hashtag: { // field return type
    id: string; // String!
    name: string; // String!
    pagedPosts: NexusGenRootTypes['PagedPosts']; // PagedPosts!
    postCount: number; // Int!
  }
  HiddenUser: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
    viewer: NexusGenRootTypes['User'] | null; // User
    viewerId: string; // String!
  }
  Like: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  LikesPage: { // field return type
    id: string | null; // ID
    isNextPage: boolean | null; // Boolean
    profiles: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Location: { // field return type
    PostCount: number; // Int!
    id: number; // Int!
    lat: string; // String!
    lon: string; // String!
    name: string; // String!
    pagedPosts: NexusGenRootTypes['PagedPosts']; // PagedPosts!
  }
  Message: { // field return type
    chatId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isLiked: boolean; // Boolean!
    isRead: boolean | null; // Boolean
    like: NexusGenRootTypes['MessageLike'] | null; // MessageLike
    likesCount: number; // Int!
    message: NexusGenRootTypes['Message'] | null; // Message
    photo: NexusGenRootTypes['Photo'] | null; // Photo
    post: NexusGenRootTypes['Post'] | null; // Post
    reactionsPage: NexusGenRootTypes['MessageLikesPage']; // MessageLikesPage!
    readAt: NexusGenScalars['DateTime'] | null; // DateTime
    readBy: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    sentBy: NexusGenRootTypes['User'] | null; // User
    sticker: string | null; // String
    text: string | null; // String
    topReactions: Array<string | null> | null; // [String]
    type: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  MessageLike: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    message: NexusGenRootTypes['Message'] | null; // Message
    messageId: string; // String!
    reaction: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  MessageLikesPage: { // field return type
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
    reactions: Array<NexusGenRootTypes['MessageLike'] | null> | null; // [MessageLike]
  }
  MessagesPage: { // field return type
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
    messages: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
  }
  Mutation: { // field return type
    acceptChat: NexusGenRootTypes['User']; // User!
    addCollectionPosts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
    addHashTagSearch: NexusGenRootTypes['HashTagSearch']; // HashTagSearch!
    addPeople: NexusGenRootTypes['Chat']; // Chat!
    addUserSearch: NexusGenRootTypes['UserSearch']; // UserSearch!
    adminToggle: NexusGenRootTypes['Chat']; // Chat!
    changePassword: boolean; // Boolean!
    clearRecentSearch: boolean; // Boolean!
    comment: NexusGenRootTypes['Comment']; // Comment!
    commentLike: NexusGenRootTypes['CommentLike'] | null; // CommentLike
    commentUnlike: NexusGenRootTypes['CommentLike'] | null; // CommentLike
    confirmEmail: NexusGenRootTypes['EmailConfirmation']; // EmailConfirmation!
    confirmFollowRequest: NexusGenRootTypes['Follows']; // Follows!
    confirmReset: NexusGenRootTypes['confirmPassword']; // confirmPassword!
    createCollection: NexusGenRootTypes['CollectionAndPosts']; // CollectionAndPosts!
    createEmailConfirmation: NexusGenRootTypes['EmailConfirmation']; // EmailConfirmation!
    createFollowRequest: NexusGenRootTypes['FollowRequest']; // FollowRequest!
    deleteChat: NexusGenRootTypes['Chat']; // Chat!
    deleteCollection: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
    deleteCollectionPosts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
    deleteComment: NexusGenRootTypes['Comment']; // Comment!
    deleteMessage: NexusGenRootTypes['Message'] | null; // Message
    deletePost: NexusGenRootTypes['Post']; // Post!
    deleteReply: NexusGenRootTypes['Reply']; // Reply!
    editCollection: NexusGenRootTypes['Collection']; // Collection!
    editPost: NexusGenRootTypes['Post']; // Post!
    editUser: NexusGenRootTypes['User']; // User!
    follow: NexusGenRootTypes['Follows'] | null; // Follows
    forwardMessage: Array<NexusGenRootTypes['Message'] | null>; // [Message]!
    hideTag: NexusGenRootTypes['Post']; // Post!
    hideUser: NexusGenRootTypes['HiddenUser']; // HiddenUser!
    leaveChat: NexusGenRootTypes['Chat']; // Chat!
    like: NexusGenRootTypes['Post'] | null; // Post
    likeMessage: NexusGenRootTypes['Message'] | null; // Message
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    logout: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    message: NexusGenRootTypes['Message']; // Message!
    newChat: NexusGenRootTypes['Chat']; // Chat!
    post: NexusGenRootTypes['Post']; // Post!
    refresh_token: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    removeAllChatRequests: boolean; // Boolean!
    removeChatRequest: NexusGenRootTypes['Chat']; // Chat!
    removeFollowRequest: NexusGenRootTypes['FollowRequest']; // FollowRequest!
    removeFollower: NexusGenRootTypes['Follows']; // Follows!
    removeHashTagSearch: NexusGenRootTypes['HashTagSearch']; // HashTagSearch!
    removePeople: NexusGenRootTypes['Chat']; // Chat!
    removeProfilePhoto: NexusGenRootTypes['User']; // User!
    removeTag: NexusGenRootTypes['Post'] | null; // Post
    removeUserSearch: NexusGenRootTypes['UserSearch']; // UserSearch!
    reply: NexusGenRootTypes['Reply']; // Reply!
    replyLike: NexusGenRootTypes['ReplyLike'] | null; // ReplyLike
    replyUnlike: NexusGenRootTypes['ReplyLike'] | null; // ReplyLike
    saveChatName: NexusGenRootTypes['Chat']; // Chat!
    savePost: NexusGenRootTypes['Post']; // Post!
    sendReset: NexusGenRootTypes['sendReset']; // sendReset!
    sharePost: Array<NexusGenRootTypes['Message'] | null>; // [Message]!
    showTag: NexusGenRootTypes['Post']; // Post!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    testMail: NexusGenRootTypes['EmailConfirmation']; // EmailConfirmation!
    unfollow: NexusGenRootTypes['Follows'] | null; // Follows
    unlike: NexusGenRootTypes['Post'] | null; // Post
    unlikeMessage: NexusGenRootTypes['Message'] | null; // Message
    unsavePost: NexusGenRootTypes['Post']; // Post!
    uploadMessagePhoto: NexusGenRootTypes['Message']; // Message!
    uploadPhotoPost: NexusGenRootTypes['Post']; // Post!
    uploadProfilePhoto: NexusGenRootTypes['User']; // User!
    verifyReset: NexusGenRootTypes['verifyReset']; // verifyReset!
  }
  MutualFollowers: { // field return type
    count: number; // Int!
    id: string | null; // ID
    users: Array<NexusGenRootTypes['UserMini'] | null> | null; // [UserMini]
  }
  PageInfo: { // field return type
    cursorId: string; // String!
    isNextPage: boolean; // Boolean!
  }
  PagedPosts: { // field return type
    id: string; // ID!
    isNextPage: boolean; // Boolean!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Photo: { // field return type
    aspectRatio: number; // Float!
    id: string; // String!
    postId: string | null; // String
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
  }
  Post: { // field return type
    commentsPage: NexusGenRootTypes['CommentsPage']; // CommentsPage!
    counts: NexusGenRootTypes['postCounts']; // postCounts!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    featuredComments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    hashTags: NexusGenRootTypes['Hashtag'][]; // [Hashtag!]!
    id: string; // String!
    isCollected: boolean; // Boolean!
    isEdited: boolean; // Boolean!
    isLiked: boolean; // Boolean!
    isSaved: boolean; // Boolean!
    isTagHidden: boolean; // Boolean!
    isTagged: boolean; // Boolean!
    likeCount: number; // Int!
    likes: NexusGenRootTypes['LikesPage']; // LikesPage!
    location: NexusGenRootTypes['Location'] | null; // Location
    locationId: number | null; // Int
    photos: NexusGenRootTypes['Photo'][]; // [Photo!]!
    postedBy: NexusGenRootTypes['User'] | null; // User
    postedById: string; // String!
    text: string; // String!
  }
  Query: { // field return type
    activityPage: NexusGenRootTypes['ActivityPage']; // ActivityPage!
    chatPagedMessages: NexusGenRootTypes['MessagesPage'] | null; // MessagesPage
    checkUsername: boolean; // Boolean!
    collectionsPaged: NexusGenRootTypes['CollectionsPaged']; // CollectionsPaged!
    comment: NexusGenRootTypes['Comment']; // Comment!
    commentsPaged: NexusGenRootTypes['CommentsPage']; // CommentsPage!
    explorePosts: NexusGenRootTypes['PagedPosts']; // PagedPosts!
    feed: NexusGenRootTypes['Feed']; // Feed!
    followRequests: NexusGenRootTypes['UsersListPage']; // UsersListPage!
    followers: NexusGenRootTypes['UsersListPage']; // UsersListPage!
    following: NexusGenRootTypes['UsersListPage'] | null; // UsersListPage
    followingPosts: NexusGenRootTypes['FollowingPosts'] | null; // FollowingPosts
    hashTag: NexusGenRootTypes['Hashtag']; // Hashtag!
    isNewPosts: boolean | null; // Boolean
    location: NexusGenRootTypes['Location'] | null; // Location
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    popularUsers: NexusGenRootTypes['UsersListPage']; // UsersListPage!
    postLikes: NexusGenRootTypes['Like'][]; // [Like!]!
    rawQuery: boolean | null; // Boolean
    recentSearch: Array<NexusGenRootTypes['RecentSearch'] | null>; // [RecentSearch]!
    replies: NexusGenRootTypes['Reply'][]; // [Reply!]!
    requestChatsPaged: NexusGenRootTypes['ChatsPage'] | null; // ChatsPage
    savedPostsPaged: NexusGenRootTypes['PagedPosts'] | null; // PagedPosts
    search: Array<NexusGenRootTypes['SearchResult'] | null>; // [SearchResult]!
    suggestedUsers: NexusGenRootTypes['UsersListPage']; // UsersListPage!
    tagFilter: NexusGenRootTypes['Hashtag'][]; // [Hashtag!]!
    tags: NexusGenRootTypes['TagsPage'] | null; // TagsPage
    topHashTags: NexusGenRootTypes['Hashtag'][]; // [Hashtag!]!
    uniqueChat: NexusGenRootTypes['Chat']; // Chat!
    uniqueCollection: NexusGenRootTypes['Collection']; // Collection!
    uniqueMessage: NexusGenRootTypes['Message'] | null; // Message
    uniquePost: NexusGenRootTypes['Post']; // Post!
    uniqueReply: NexusGenRootTypes['Reply'] | null; // Reply
    uniqueUserPosts: NexusGenRootTypes['PagedPosts'] | null; // PagedPosts
    user: NexusGenRootTypes['User']; // User!
    usersFilter: NexusGenRootTypes['User'][]; // [User!]!
    viewer: NexusGenRootTypes['User']; // User!
    viewerChatsPaged: NexusGenRootTypes['ChatsPage'] | null; // ChatsPage
    viewerSoloChats: NexusGenRootTypes['ChatsPage'] | null; // ChatsPage
  }
  RecentSearch: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hashTag: NexusGenRootTypes['Hashtag'] | null; // Hashtag
    hashTagName: string | null; // String
    id: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  Reply: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    commentId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isLiked: boolean; // Boolean!
    likeCount: number; // Int!
    likes: NexusGenRootTypes['LikesPage']; // LikesPage!
    postId: string; // String!
    postedBy: NexusGenRootTypes['User'] | null; // User
    postedById: string; // String!
    text: string; // String!
  }
  ReplyLike: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    reply: NexusGenRootTypes['Reply'] | null; // Reply
    replyId: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  ReplyPage: { // field return type
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
    replies: Array<NexusGenRootTypes['Reply'] | null> | null; // [Reply]
  }
  SavedPost: { // field return type
    id: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    savedAt: NexusGenScalars['DateTime']; // DateTime!
    savedBy: NexusGenRootTypes['User'] | null; // User
    savedById: string; // String!
  }
  SavedPostsPage: { // field return type
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  SearchResult: { // field return type
    hashTag: NexusGenRootTypes['Hashtag'] | null; // Hashtag
    hashTagId: string | null; // String
    id: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  ShareList: { // field return type
    chatId: string | null; // String
    postId: string; // String!
    text: string; // String!
    userId: string | null; // String
  }
  ShareSearch: { // field return type
    userId: string | null; // String
  }
  Subscription: { // field return type
    deletedMessage: NexusGenRootTypes['Message'] | null; // Message
    newActivity: NexusGenRootTypes['User'] | null; // User
    newInboxMessage: NexusGenRootTypes['Chat'] | null; // Chat
    newMessage: NexusGenRootTypes['Message'] | null; // Message
    newPosts: NexusGenRootTypes['Post'] | null; // Post
    readMessage: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
    unreadMessageCount: NexusGenRootTypes['User'] | null; // User
  }
  Tag: { // field return type
    User: NexusGenRootTypes['User']; // User!
    id: string; // String!
    photoId: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    userId: string; // String!
    x: number; // Int!
    y: number; // Int!
  }
  TagsPage: { // field return type
    id: string; // String!
    isNextPage: boolean; // Boolean!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Upload: { // field return type
    success: boolean; // Boolean!
  }
  User: { // field return type
    acceptedChats: Array<NexusGenRootTypes['Chat'] | null>; // [Chat]!
    activityCounts: NexusGenRootTypes['ActivityCount']; // ActivityCount!
    bio: string | null; // String
    chatRequestsCount: number; // Int!
    counts: NexusGenRootTypes['counts']; // counts!
    email: string | null; // String
    followedBy: NexusGenRootTypes['UsersListPage'] | null; // UsersListPage
    following: NexusGenRootTypes['UsersListPage'] | null; // UsersListPage
    fullName: string | null; // String
    gender: string | null; // String
    id: string; // String!
    isCollection: boolean; // Boolean!
    isFollowing: boolean; // Boolean!
    isPrivate: boolean; // Boolean!
    isRequested: boolean; // Boolean!
    likes: NexusGenRootTypes['Like'][]; // [Like!]!
    mutualFollowers: NexusGenRootTypes['MutualFollowers'] | null; // MutualFollowers
    photoVersion: number | null; // Int
    postsPage: NexusGenRootTypes['PagedPosts'] | null; // PagedPosts
    tagged: NexusGenRootTypes['TagsPage'] | null; // TagsPage
    tokenVersion: number; // Int!
    unreadCount: number; // Int!
    url: string | null; // String
    username: string; // String!
  }
  UserMini: { // field return type
    fullName: string; // String!
    id: string; // String!
    isFollowing: boolean; // Boolean!
    photoVersion: number; // Int!
    username: string; // String!
  }
  UserSearch: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    searchedById: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  UsersListPage: { // field return type
    id: string | null; // String
    isNextPage: boolean | null; // Boolean
    profiles: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  commentCounts: { // field return type
    likes: number; // Int!
    replies: number; // Int!
  }
  confirmPassword: { // field return type
    reset: boolean; // Boolean!
  }
  counts: { // field return type
    followedBy: number; // Int!
    follows: number; // Int!
    id: string | null; // ID
    media: number; // Int!
  }
  postCounts: { // field return type
    comments: number; // Int!
    commentsOnly: number; // Int!
    likes: number; // Int!
  }
  sendReset: { // field return type
    censoredEmail: string; // String!
  }
  verifyReset: { // field return type
    verified: boolean; // Boolean!
  }
}

export interface NexusGenFieldTypeNames {
  Activity: { // field return type name
    comment: 'Comment'
    createdAt: 'DateTime'
    id: 'String'
    isRead: 'Boolean'
    post: 'Post'
    receivedBy: 'User'
    reply: 'Reply'
    sentBy: 'User'
    type: 'String'
  }
  ActivityCount: { // field return type name
    comments: 'Int'
    followRequests: 'Int'
    follows: 'Int'
    id: 'String'
    likes: 'Int'
    sum: 'Int'
    tagged: 'Int'
    totalFollowRequests: 'Int'
  }
  ActivityPage: { // field return type name
    activity: 'Activity'
    activityCounts: 'ActivityCount'
    followRequests: 'User'
    id: 'ID'
    isNextPage: 'Boolean'
  }
  AuthPayload: { // field return type name
    accessToken: 'String'
  }
  Chat: { // field return type name
    admins: 'User'
    createdBy: 'User'
    createdById: 'String'
    id: 'String'
    isAdmin: 'Boolean'
    isRequest: 'Boolean'
    lastestMessage: 'Message'
    members: 'User'
    messagesPage: 'MessagesPage'
    name: 'String'
  }
  ChatsPage: { // field return type name
    chats: 'Chat'
    id: 'String'
    isNextPage: 'Boolean'
  }
  CollectedPost: { // field return type name
    collection: 'Collection'
    collectionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    post: 'Post'
    postId: 'String'
  }
  Collection: { // field return type name
    createdById: 'String'
    id: 'String'
    isCollected: 'Boolean'
    name: 'String'
    nameLink: 'String'
    pagedPosts: 'PagedPosts'
    posts: 'Post'
    updatedAt: 'DateTime'
  }
  CollectionAndPosts: { // field return type name
    collection: 'Collection'
    posts: 'Post'
  }
  CollectionsPaged: { // field return type name
    collections: 'Collection'
    id: 'String'
    isNextPage: 'Boolean'
  }
  Comment: { // field return type name
    counts: 'commentCounts'
    createdAt: 'DateTime'
    id: 'String'
    isEdited: 'Boolean'
    isLiked: 'Boolean'
    likes: 'LikesPage'
    post: 'Post'
    postId: 'String'
    postedBy: 'User'
    postedById: 'String'
    replyPage: 'ReplyPage'
    text: 'String'
    uniqueReply: 'Reply'
  }
  CommentLike: { // field return type name
    comment: 'Comment'
    commentId: 'String'
    createdAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  CommentsPage: { // field return type name
    comments: 'Comment'
    id: 'String'
    isNextPage: 'Boolean'
  }
  EmailConfirmation: { // field return type name
    status: 'Boolean'
  }
  Feed: { // field return type name
    count: 'Int'
    id: 'ID'
    posts: 'Post'
  }
  FollowRequest: { // field return type name
    createdAt: 'DateTime'
    userReceive: 'User'
    userReceiveId: 'String'
    userRequest: 'User'
    userRequestId: 'String'
  }
  FollowingPosts: { // field return type name
    id: 'ID'
    isNextPage: 'Boolean'
    posts: 'Post'
  }
  Follows: { // field return type name
    createdAt: 'DateTime'
    follower: 'User'
    followerId: 'String'
    following: 'User'
    followingId: 'String'
    id: 'String'
  }
  HashTagSearch: { // field return type name
    createdAt: 'DateTime'
    hashTag: 'Hashtag'
    hashTagName: 'String'
    searchedById: 'String'
  }
  Hashtag: { // field return type name
    id: 'String'
    name: 'String'
    pagedPosts: 'PagedPosts'
    postCount: 'Int'
  }
  HiddenUser: { // field return type name
    user: 'User'
    userId: 'String'
    viewer: 'User'
    viewerId: 'String'
  }
  Like: { // field return type name
    createdAt: 'DateTime'
    post: 'Post'
    postId: 'String'
    user: 'User'
    userId: 'String'
  }
  LikesPage: { // field return type name
    id: 'ID'
    isNextPage: 'Boolean'
    profiles: 'User'
  }
  Location: { // field return type name
    PostCount: 'Int'
    id: 'Int'
    lat: 'String'
    lon: 'String'
    name: 'String'
    pagedPosts: 'PagedPosts'
  }
  Message: { // field return type name
    chatId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    isLiked: 'Boolean'
    isRead: 'Boolean'
    like: 'MessageLike'
    likesCount: 'Int'
    message: 'Message'
    photo: 'Photo'
    post: 'Post'
    reactionsPage: 'MessageLikesPage'
    readAt: 'DateTime'
    readBy: 'User'
    sentBy: 'User'
    sticker: 'String'
    text: 'String'
    topReactions: 'String'
    type: 'String'
    user: 'User'
  }
  MessageLike: { // field return type name
    createdAt: 'DateTime'
    message: 'Message'
    messageId: 'String'
    reaction: 'String'
    user: 'User'
    userId: 'String'
  }
  MessageLikesPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    reactions: 'MessageLike'
  }
  MessagesPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    messages: 'Message'
  }
  Mutation: { // field return type name
    acceptChat: 'User'
    addCollectionPosts: 'Post'
    addHashTagSearch: 'HashTagSearch'
    addPeople: 'Chat'
    addUserSearch: 'UserSearch'
    adminToggle: 'Chat'
    changePassword: 'Boolean'
    clearRecentSearch: 'Boolean'
    comment: 'Comment'
    commentLike: 'CommentLike'
    commentUnlike: 'CommentLike'
    confirmEmail: 'EmailConfirmation'
    confirmFollowRequest: 'Follows'
    confirmReset: 'confirmPassword'
    createCollection: 'CollectionAndPosts'
    createEmailConfirmation: 'EmailConfirmation'
    createFollowRequest: 'FollowRequest'
    deleteChat: 'Chat'
    deleteCollection: 'Post'
    deleteCollectionPosts: 'Post'
    deleteComment: 'Comment'
    deleteMessage: 'Message'
    deletePost: 'Post'
    deleteReply: 'Reply'
    editCollection: 'Collection'
    editPost: 'Post'
    editUser: 'User'
    follow: 'Follows'
    forwardMessage: 'Message'
    hideTag: 'Post'
    hideUser: 'HiddenUser'
    leaveChat: 'Chat'
    like: 'Post'
    likeMessage: 'Message'
    login: 'AuthPayload'
    logout: 'AuthPayload'
    message: 'Message'
    newChat: 'Chat'
    post: 'Post'
    refresh_token: 'AuthPayload'
    removeAllChatRequests: 'Boolean'
    removeChatRequest: 'Chat'
    removeFollowRequest: 'FollowRequest'
    removeFollower: 'Follows'
    removeHashTagSearch: 'HashTagSearch'
    removePeople: 'Chat'
    removeProfilePhoto: 'User'
    removeTag: 'Post'
    removeUserSearch: 'UserSearch'
    reply: 'Reply'
    replyLike: 'ReplyLike'
    replyUnlike: 'ReplyLike'
    saveChatName: 'Chat'
    savePost: 'Post'
    sendReset: 'sendReset'
    sharePost: 'Message'
    showTag: 'Post'
    signup: 'AuthPayload'
    testMail: 'EmailConfirmation'
    unfollow: 'Follows'
    unlike: 'Post'
    unlikeMessage: 'Message'
    unsavePost: 'Post'
    uploadMessagePhoto: 'Message'
    uploadPhotoPost: 'Post'
    uploadProfilePhoto: 'User'
    verifyReset: 'verifyReset'
  }
  MutualFollowers: { // field return type name
    count: 'Int'
    id: 'ID'
    users: 'UserMini'
  }
  PageInfo: { // field return type name
    cursorId: 'String'
    isNextPage: 'Boolean'
  }
  PagedPosts: { // field return type name
    id: 'ID'
    isNextPage: 'Boolean'
    posts: 'Post'
  }
  Photo: { // field return type name
    aspectRatio: 'Float'
    id: 'String'
    postId: 'String'
    tags: 'Tag'
  }
  Post: { // field return type name
    commentsPage: 'CommentsPage'
    counts: 'postCounts'
    createdAt: 'DateTime'
    featuredComments: 'Comment'
    hashTags: 'Hashtag'
    id: 'String'
    isCollected: 'Boolean'
    isEdited: 'Boolean'
    isLiked: 'Boolean'
    isSaved: 'Boolean'
    isTagHidden: 'Boolean'
    isTagged: 'Boolean'
    likeCount: 'Int'
    likes: 'LikesPage'
    location: 'Location'
    locationId: 'Int'
    photos: 'Photo'
    postedBy: 'User'
    postedById: 'String'
    text: 'String'
  }
  Query: { // field return type name
    activityPage: 'ActivityPage'
    chatPagedMessages: 'MessagesPage'
    checkUsername: 'Boolean'
    collectionsPaged: 'CollectionsPaged'
    comment: 'Comment'
    commentsPaged: 'CommentsPage'
    explorePosts: 'PagedPosts'
    feed: 'Feed'
    followRequests: 'UsersListPage'
    followers: 'UsersListPage'
    following: 'UsersListPage'
    followingPosts: 'FollowingPosts'
    hashTag: 'Hashtag'
    isNewPosts: 'Boolean'
    location: 'Location'
    pageInfo: 'PageInfo'
    popularUsers: 'UsersListPage'
    postLikes: 'Like'
    rawQuery: 'Boolean'
    recentSearch: 'RecentSearch'
    replies: 'Reply'
    requestChatsPaged: 'ChatsPage'
    savedPostsPaged: 'PagedPosts'
    search: 'SearchResult'
    suggestedUsers: 'UsersListPage'
    tagFilter: 'Hashtag'
    tags: 'TagsPage'
    topHashTags: 'Hashtag'
    uniqueChat: 'Chat'
    uniqueCollection: 'Collection'
    uniqueMessage: 'Message'
    uniquePost: 'Post'
    uniqueReply: 'Reply'
    uniqueUserPosts: 'PagedPosts'
    user: 'User'
    usersFilter: 'User'
    viewer: 'User'
    viewerChatsPaged: 'ChatsPage'
    viewerSoloChats: 'ChatsPage'
  }
  RecentSearch: { // field return type name
    createdAt: 'DateTime'
    hashTag: 'Hashtag'
    hashTagName: 'String'
    id: 'String'
    user: 'User'
    userId: 'String'
  }
  Reply: { // field return type name
    comment: 'Comment'
    commentId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    isLiked: 'Boolean'
    likeCount: 'Int'
    likes: 'LikesPage'
    postId: 'String'
    postedBy: 'User'
    postedById: 'String'
    text: 'String'
  }
  ReplyLike: { // field return type name
    createdAt: 'DateTime'
    reply: 'Reply'
    replyId: 'String'
    user: 'User'
    userId: 'String'
  }
  ReplyPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    replies: 'Reply'
  }
  SavedPost: { // field return type name
    id: 'String'
    post: 'Post'
    postId: 'String'
    savedAt: 'DateTime'
    savedBy: 'User'
    savedById: 'String'
  }
  SavedPostsPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    posts: 'Post'
  }
  SearchResult: { // field return type name
    hashTag: 'Hashtag'
    hashTagId: 'String'
    id: 'String'
    user: 'User'
    userId: 'String'
  }
  ShareList: { // field return type name
    chatId: 'String'
    postId: 'String'
    text: 'String'
    userId: 'String'
  }
  ShareSearch: { // field return type name
    userId: 'String'
  }
  Subscription: { // field return type name
    deletedMessage: 'Message'
    newActivity: 'User'
    newInboxMessage: 'Chat'
    newMessage: 'Message'
    newPosts: 'Post'
    readMessage: 'Message'
    unreadMessageCount: 'User'
  }
  Tag: { // field return type name
    User: 'User'
    id: 'String'
    photoId: 'String'
    post: 'Post'
    postId: 'String'
    userId: 'String'
    x: 'Int'
    y: 'Int'
  }
  TagsPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    posts: 'Post'
  }
  Upload: { // field return type name
    success: 'Boolean'
  }
  User: { // field return type name
    acceptedChats: 'Chat'
    activityCounts: 'ActivityCount'
    bio: 'String'
    chatRequestsCount: 'Int'
    counts: 'counts'
    email: 'String'
    followedBy: 'UsersListPage'
    following: 'UsersListPage'
    fullName: 'String'
    gender: 'String'
    id: 'String'
    isCollection: 'Boolean'
    isFollowing: 'Boolean'
    isPrivate: 'Boolean'
    isRequested: 'Boolean'
    likes: 'Like'
    mutualFollowers: 'MutualFollowers'
    photoVersion: 'Int'
    postsPage: 'PagedPosts'
    tagged: 'TagsPage'
    tokenVersion: 'Int'
    unreadCount: 'Int'
    url: 'String'
    username: 'String'
  }
  UserMini: { // field return type name
    fullName: 'String'
    id: 'String'
    isFollowing: 'Boolean'
    photoVersion: 'Int'
    username: 'String'
  }
  UserSearch: { // field return type name
    createdAt: 'DateTime'
    searchedById: 'String'
    user: 'User'
    userId: 'String'
  }
  UsersListPage: { // field return type name
    id: 'String'
    isNextPage: 'Boolean'
    profiles: 'User'
  }
  commentCounts: { // field return type name
    likes: 'Int'
    replies: 'Int'
  }
  confirmPassword: { // field return type name
    reset: 'Boolean'
  }
  counts: { // field return type name
    followedBy: 'Int'
    follows: 'Int'
    id: 'ID'
    media: 'Int'
  }
  postCounts: { // field return type name
    comments: 'Int'
    commentsOnly: 'Int'
    likes: 'Int'
  }
  sendReset: { // field return type name
    censoredEmail: 'String'
  }
  verifyReset: { // field return type name
    verified: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Chat: {
    messagesPage: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Collection: {
    isCollected: { // args
      postId?: string | null; // String
    }
    pagedPosts: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Comment: {
    likes: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    replyPage: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    uniqueReply: { // args
      replyId: string; // String!
    }
  }
  Hashtag: {
    pagedPosts: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Location: {
    pagedPosts: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Message: {
    reactionsPage: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Mutation: {
    acceptChat: { // args
      chatId: string; // String!
      date: string; // String!
    }
    addCollectionPosts: { // args
      collectionId: string; // String!
      postIds: string[]; // [String!]!
    }
    addHashTagSearch: { // args
      hashTagName: string; // String!
    }
    addPeople: { // args
      chatId: string; // String!
      members: string[]; // [String!]!
    }
    addUserSearch: { // args
      userId: string; // String!
    }
    adminToggle: { // args
      chatId: string; // String!
      memberId: string; // String!
    }
    changePassword: { // args
      newPassword: string; // String!
      oldPassword: string; // String!
    }
    comment: { // args
      postId: string; // String!
      text: string; // String!
    }
    commentLike: { // args
      commentId: string; // String!
    }
    commentUnlike: { // args
      commentId: string; // String!
    }
    confirmEmail: { // args
      email: string; // String!
      passcode: number; // Int!
    }
    confirmFollowRequest: { // args
      requestId: string; // String!
    }
    confirmReset: { // args
      password: string; // String!
      resetToken: string; // String!
      userId: string; // String!
    }
    createCollection: { // args
      name: string; // String!
      newPostId?: string | null; // String
      savedPostIds?: string[] | null; // [String!]
    }
    createEmailConfirmation: { // args
      email: string; // String!
    }
    createFollowRequest: { // args
      receiveId: string; // String!
    }
    deleteChat: { // args
      chatId: string; // String!
    }
    deleteCollection: { // args
      collectionId: string; // String!
    }
    deleteCollectionPosts: { // args
      collectionId: string; // String!
      postIds: string[]; // [String!]!
    }
    deleteComment: { // args
      commentId: string; // String!
    }
    deleteMessage: { // args
      messageId: string; // String!
    }
    deletePost: { // args
      postId: string; // String!
    }
    deleteReply: { // args
      replyId: string; // String!
    }
    editCollection: { // args
      collectionId: string; // String!
      name: string; // String!
    }
    editPost: { // args
      location?: NexusGenInputs['LocationType'] | null; // LocationType
      photos: NexusGenInputs['PhotoEditType'][]; // [PhotoEditType!]!
      postId: string; // String!
      text?: string | null; // String
    }
    editUser: { // args
      bio: string; // String!
      email: string; // String!
      fullName: string; // String!
      isPrivate: boolean; // Boolean!
      url: string; // String!
      username: string; // String!
    }
    follow: { // args
      username: string; // String!
    }
    forwardMessage: { // args
      ids: string[]; // [String!]!
      photoId?: string | null; // String
      postId?: string | null; // String
      text?: string | null; // String
    }
    hideTag: { // args
      postId: string; // String!
    }
    hideUser: { // args
      id: string; // String!
    }
    leaveChat: { // args
      chatId: string; // String!
    }
    like: { // args
      postId: string; // String!
    }
    likeMessage: { // args
      messageId: string; // String!
      reaction: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    message: { // args
      chatId: string; // String!
      messageId?: string | null; // String
      postId?: string | null; // String
      sticker?: string | null; // String
      text?: string | null; // String
      type?: string | null; // String
    }
    newChat: { // args
      members: string[]; // [String!]!
    }
    post: { // args
      text: string; // String!
    }
    removeChatRequest: { // args
      chatId: string; // String!
      date: string; // String!
    }
    removeFollowRequest: { // args
      receiveId: string; // String!
      requestId: string; // String!
    }
    removeFollower: { // args
      followerId: string; // String!
    }
    removeHashTagSearch: { // args
      hashTagName: string; // String!
    }
    removePeople: { // args
      chatId: string; // String!
      memberId: string; // String!
    }
    removeTag: { // args
      postId: string; // String!
    }
    removeUserSearch: { // args
      userId: string; // String!
    }
    reply: { // args
      commentId: string; // String!
      postId: string; // String!
      text: string; // String!
    }
    replyLike: { // args
      replyId: string; // String!
    }
    replyUnlike: { // args
      replyId: string; // String!
    }
    saveChatName: { // args
      chatId: string; // String!
      name: string; // String!
    }
    savePost: { // args
      collectionId?: string | null; // String
      postId: string; // String!
    }
    sendReset: { // args
      email: string; // String!
    }
    sharePost: { // args
      ids: string[]; // [String!]!
      postId: string; // String!
      text: string; // String!
    }
    showTag: { // args
      postId: string; // String!
    }
    signup: { // args
      email: string; // String!
      fullName: string; // String!
      password: string; // String!
      username: string; // String!
    }
    unfollow: { // args
      username: string; // String!
    }
    unlike: { // args
      postId: string; // String!
    }
    unlikeMessage: { // args
      messageId: string; // String!
    }
    unsavePost: { // args
      postId: string; // String!
    }
    uploadMessagePhoto: { // args
      aspectRatio: number; // Float!
      base64: string; // String!
      chatId: string; // String!
    }
    uploadPhotoPost: { // args
      location?: NexusGenInputs['LocationType'] | null; // LocationType
      photoData: NexusGenInputs['PhotoInputType'][]; // [PhotoInputType!]!
      text?: string | null; // String
    }
    uploadProfilePhoto: { // args
      url: string; // String!
    }
    verifyReset: { // args
      resetToken: string; // String!
      userId: string; // String!
    }
  }
  Post: {
    commentsPage: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    likes: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Query: {
    activityPage: { // args
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
    chatPagedMessages: { // args
      chatId: string; // String!
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
    checkUsername: { // args
      username: string; // String!
    }
    collectionsPaged: { // args
      isSelection?: boolean | null; // Boolean
      limit: number; // Int!
      skip: number; // Int!
    }
    comment: { // args
      commentId: string; // String!
    }
    commentsPaged: { // args
      limit: number; // Int!
      postId: string; // String!
      skip: number; // Int!
    }
    explorePosts: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    feed: { // args
      orderBy?: NexusGenInputs['PostOrderBy'][] | null; // [PostOrderBy!]
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    followRequests: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    followers: { // args
      limit: number; // Int!
      skip: number; // Int!
      username: string; // String!
    }
    following: { // args
      limit: number; // Int!
      skip: number; // Int!
      username: string; // String!
    }
    followingPosts: { // args
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
    hashTag: { // args
      name: string; // String!
    }
    isNewPosts: { // args
      date: string; // String!
    }
    location: { // args
      locationId: number; // Int!
    }
    pageInfo: { // args
      commentId: string; // String!
      cursorId?: string | null; // String
    }
    popularUsers: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    postLikes: { // args
      postId: string; // String!
    }
    replies: { // args
      commentId: string; // String!
      cursorId?: string | null; // String
    }
    requestChatsPaged: { // args
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
    savedPostsPaged: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    search: { // args
      filter: string; // String!
    }
    suggestedUsers: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    tagFilter: { // args
      filter: string; // String!
    }
    tags: { // args
      limit: number; // Int!
      skip: number; // Int!
      username: string; // String!
    }
    uniqueChat: { // args
      chatId: string; // String!
      date: string; // String!
    }
    uniqueCollection: { // args
      collectionId: string; // String!
    }
    uniqueMessage: { // args
      messageId: string; // String!
    }
    uniquePost: { // args
      postId: string; // String!
    }
    uniqueReply: { // args
      replyId: string; // String!
    }
    uniqueUserPosts: { // args
      limit: number; // Int!
      skip: number; // Int!
      username: string; // String!
    }
    user: { // args
      username: string; // String!
    }
    usersFilter: { // args
      filter: string; // String!
    }
    viewerChatsPaged: { // args
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
    viewerSoloChats: { // args
      date: string; // String!
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Reply: {
    likes: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
  Subscription: {
    newMessage: { // args
      chatId: string; // String!
    }
  }
  User: {
    followedBy: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    following: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    postsPage: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
    tagged: { // args
      limit: number; // Int!
      skip: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}