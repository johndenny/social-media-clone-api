### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  comment: Comment
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  post: Post
  receivedBy: User
  reply: Reply
  sentBy: User
  type: String!
}

type ActivityCount {
  comments: Int!
  followRequests: Int!
  follows: Int!
  id: String!
  likes: Int!
  sum: Int!
  tagged: Int!
  totalFollowRequests: Int!
}

type ActivityPage {
  activity: [Activity!]!
  activityCounts: ActivityCount
  followRequests: [User]
  id: ID
  isNextPage: Boolean
}

type AuthPayload {
  accessToken: String!
}

type Chat {
  admins: [User]!
  createdBy: User
  createdById: String!
  id: String!
  isAdmin: Boolean
  isRequest: Boolean!
  lastestMessage: Message
  members: [User]!
  messagesPage(limit: Int!, skip: Int!): MessagesPage!
  name: String
}

type ChatsPage {
  chats: [Chat]
  id: String
  isNextPage: Boolean
}

type CollectedPost {
  collection: Collection
  collectionId: String!
  createdAt: DateTime!
  id: String!
  post: Post
  postId: String!
}

type Collection {
  createdById: String!
  id: String!
  isCollected(postId: String): Boolean!
  name: String!
  nameLink: String!
  pagedPosts(limit: Int!, skip: Int!): PagedPosts!
  posts: [Post]
  updatedAt: DateTime!
}

type CollectionAndPosts {
  collection: Collection!
  posts: [Post]!
}

type CollectionsPaged {
  collections: [Collection]!
  id: String!
  isNextPage: Boolean!
}

type Comment {
  counts: commentCounts!
  createdAt: DateTime!
  id: String!
  isEdited: Boolean!
  isLiked: Boolean!
  likes(limit: Int!, skip: Int!): LikesPage!
  post: Post
  postId: String!
  postedBy: User
  postedById: String!
  replyPage(limit: Int!, skip: Int!): ReplyPage!
  text: String!
  uniqueReply(replyId: String!): Reply
}

type CommentLike {
  comment: Comment
  commentId: String!
  createdAt: DateTime!
  user: User
  userId: String!
}

type CommentsPage {
  comments: [Comment]
  id: String
  isNextPage: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type EmailConfirmation {
  status: Boolean!
}

type Feed {
  count: Int!
  id: ID
  posts: [Post!]!
}

type FollowRequest {
  createdAt: DateTime!
  userReceive: User
  userReceiveId: String!
  userRequest: User
  userRequestId: String!
}

type FollowingPosts {
  id: ID!
  isNextPage: Boolean!
  posts: [Post]
}

type Follows {
  createdAt: DateTime!
  follower: User
  followerId: String!
  following: User
  followingId: String!
  id: String!
}

type HashTagSearch {
  createdAt: DateTime!
  hashTag: Hashtag
  hashTagName: String!
  searchedById: String!
}

type Hashtag {
  id: String!
  name: String!
  pagedPosts(limit: Int!, skip: Int!): PagedPosts!
  postCount: Int!
}

type HiddenUser {
  user: User
  userId: String!
  viewer: User
  viewerId: String!
}

type Like {
  createdAt: DateTime!
  post: Post
  postId: String!
  user: User
  userId: String!
}

type LikesPage {
  id: ID
  isNextPage: Boolean
  profiles: [User]
}

type Location {
  PostCount: Int!
  id: Int!
  lat: String!
  lon: String!
  name: String!
  pagedPosts(limit: Int!, skip: Int!): PagedPosts!
}

input LocationType {
  id: Int!
  lat: String!
  lon: String!
  name: String!
}

type Message {
  chatId: String!
  createdAt: DateTime!
  id: String!
  isLiked: Boolean!
  isRead: Boolean
  like: MessageLike
  likesCount: Int!
  message: Message
  photo: Photo
  post: Post
  reactionsPage(limit: Int!, skip: Int!): MessageLikesPage!
  readAt: DateTime
  readBy: [User]
  sentBy: User
  sticker: String
  text: String
  topReactions: [String]
  type: String
  user: User
}

type MessageLike {
  createdAt: DateTime!
  message: Message
  messageId: String!
  reaction: String!
  user: User
  userId: String!
}

type MessageLikesPage {
  id: String
  isNextPage: Boolean
  reactions: [MessageLike]
}

type MessagesPage {
  id: String
  isNextPage: Boolean
  messages: [Message]
}

type Mutation {
  acceptChat(chatId: String!, date: String!): User!
  addCollectionPosts(collectionId: String!, postIds: [String!]!): [Post]!
  addHashTagSearch(hashTagName: String!): HashTagSearch!
  addPeople(chatId: String!, members: [String!]!): Chat!
  addUserSearch(userId: String!): UserSearch!
  adminToggle(chatId: String!, memberId: String!): Chat!
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  clearRecentSearch: Boolean!
  comment(postId: String!, text: String!): Comment!
  commentLike(commentId: String!): CommentLike
  commentUnlike(commentId: String!): CommentLike
  confirmEmail(email: String!, passcode: Int!): EmailConfirmation!
  confirmFollowRequest(requestId: String!): Follows!
  confirmReset(password: String!, resetToken: String!, userId: String!): confirmPassword!
  createCollection(name: String!, newPostId: String, savedPostIds: [String!]): CollectionAndPosts!
  createEmailConfirmation(email: String!): EmailConfirmation!
  createFollowRequest(receiveId: String!): FollowRequest!
  deleteChat(chatId: String!): Chat!
  deleteCollection(collectionId: String!): [Post]!
  deleteCollectionPosts(collectionId: String!, postIds: [String!]!): [Post]!
  deleteComment(commentId: String!): Comment!
  deleteMessage(messageId: String!): Message
  deletePost(postId: String!): Post!
  deleteReply(replyId: String!): Reply!
  editCollection(collectionId: String!, name: String!): Collection!
  editPost(location: LocationType, photos: [PhotoEditType!]!, postId: String!, text: String): Post!
  editUser(bio: String!, email: String!, fullName: String!, isPrivate: Boolean!, url: String!, username: String!): User!
  follow(username: String!): Follows
  forwardMessage(ids: [String!]!, photoId: String, postId: String, text: String): [Message]!
  hideTag(postId: String!): Post!
  hideUser(id: String!): HiddenUser!
  leaveChat(chatId: String!): Chat!
  like(postId: String!): Post
  likeMessage(messageId: String!, reaction: String!): Message
  login(email: String!, password: String!): AuthPayload!
  logout: AuthPayload!
  message(chatId: String!, messageId: String, postId: String, sticker: String, text: String, type: String): Message!
  newChat(members: [String!]!): Chat!
  post(text: String!): Post!
  refresh_token: AuthPayload!
  removeAllChatRequests: Boolean!
  removeChatRequest(chatId: String!, date: String!): Chat!
  removeFollowRequest(receiveId: String!, requestId: String!): FollowRequest!
  removeFollower(followerId: String!): Follows!
  removeHashTagSearch(hashTagName: String!): HashTagSearch!
  removePeople(chatId: String!, memberId: String!): Chat!
  removeProfilePhoto: User!
  removeTag(postId: String!): Post
  removeUserSearch(userId: String!): UserSearch!
  reply(commentId: String!, postId: String!, text: String!): Reply!
  replyLike(replyId: String!): ReplyLike
  replyUnlike(replyId: String!): ReplyLike
  saveChatName(chatId: String!, name: String!): Chat!
  savePost(collectionId: String, postId: String!): Post!
  sendReset(email: String!): sendReset!
  sharePost(ids: [String!]!, postId: String!, text: String!): [Message]!
  showTag(postId: String!): Post!
  signup(email: String!, fullName: String!, password: String!, username: String!): AuthPayload!
  testMail: EmailConfirmation!
  unfollow(username: String!): Follows
  unlike(postId: String!): Post
  unlikeMessage(messageId: String!): Message
  unsavePost(postId: String!): Post!
  uploadMessagePhoto(aspectRatio: Float!, base64: String!, chatId: String!): Message!
  uploadPhotoPost(location: LocationType, photoData: [PhotoInputType!]!, text: String): Post!
  uploadProfilePhoto(url: String!): User!
  verifyReset(resetToken: String!, userId: String!): verifyReset!
}

type MutualFollowers {
  count: Int!
  id: ID
  users: [UserMini]
}

type PageInfo {
  cursorId: String!
  isNextPage: Boolean!
}

type PagedPosts {
  id: ID!
  isNextPage: Boolean!
  posts: [Post]
}

type Photo {
  aspectRatio: Float!
  id: String!
  postId: String
  tags: [Tag!]!
}

input PhotoEditType {
  photoId: String!
  tags: [TagInputType!]!
}

input PhotoInputType {
  photoString: String!
  tags: [TagInputType!]
}

type Post {
  commentsPage(limit: Int!, skip: Int!): CommentsPage!
  counts: postCounts!
  createdAt: DateTime!
  featuredComments: [Comment]
  hashTags: [Hashtag!]!
  id: String!
  isCollected: Boolean!
  isEdited: Boolean!
  isLiked: Boolean!
  isSaved: Boolean!
  isTagHidden: Boolean!
  isTagged: Boolean!
  likeCount: Int!
  likes(limit: Int!, skip: Int!): LikesPage!
  location: Location
  locationId: Int
  photos: [Photo!]!
  postedBy: User
  postedById: String!
  text: String!
}

input PostOrderBy {
  createdAt: Sort
}

type Query {
  activityPage(date: String!, limit: Int!, skip: Int!): ActivityPage!
  chatPagedMessages(chatId: String!, date: String!, limit: Int!, skip: Int!): MessagesPage
  checkUsername(username: String!): Boolean!
  collectionsPaged(isSelection: Boolean, limit: Int!, skip: Int!): CollectionsPaged!
  comment(commentId: String!): Comment!
  commentsPaged(limit: Int!, postId: String!, skip: Int!): CommentsPage!
  explorePosts(limit: Int!, skip: Int!): PagedPosts!
  feed(orderBy: [PostOrderBy!], skip: Int, take: Int): Feed!
  followRequests(limit: Int!, skip: Int!): UsersListPage!
  followers(limit: Int!, skip: Int!, username: String!): UsersListPage!
  following(limit: Int!, skip: Int!, username: String!): UsersListPage
  followingPosts(date: String!, limit: Int!, skip: Int!): FollowingPosts
  hashTag(name: String!): Hashtag!
  isNewPosts(date: String!): Boolean
  location(locationId: Int!): Location
  pageInfo(commentId: String!, cursorId: String): PageInfo!
  popularUsers(limit: Int!, skip: Int!): UsersListPage!
  postLikes(postId: String!): [Like!]!
  rawQuery: Boolean
  recentSearch: [RecentSearch]!
  replies(commentId: String!, cursorId: String): [Reply!]!
  requestChatsPaged(date: String!, limit: Int!, skip: Int!): ChatsPage
  savedPostsPaged(limit: Int!, skip: Int!): PagedPosts
  search(filter: String!): [SearchResult]!
  suggestedUsers(limit: Int!, skip: Int!): UsersListPage!
  tagFilter(filter: String!): [Hashtag!]!
  tags(limit: Int!, skip: Int!, username: String!): TagsPage
  topHashTags: [Hashtag!]!
  uniqueChat(chatId: String!, date: String!): Chat!
  uniqueCollection(collectionId: String!): Collection!
  uniqueMessage(messageId: String!): Message
  uniquePost(postId: String!): Post!
  uniqueReply(replyId: String!): Reply
  uniqueUserPosts(limit: Int!, skip: Int!, username: String!): PagedPosts
  user(username: String!): User!
  usersFilter(filter: String!): [User!]!
  viewer: User!
  viewerChatsPaged(date: String!, limit: Int!, skip: Int!): ChatsPage
  viewerSoloChats(date: String!, limit: Int!, skip: Int!): ChatsPage
}

type RecentSearch {
  createdAt: DateTime!
  hashTag: Hashtag
  hashTagName: String
  id: String
  user: User
  userId: String
}

type Reply {
  comment: Comment
  commentId: String!
  createdAt: DateTime!
  id: String!
  isLiked: Boolean!
  likeCount: Int!
  likes(limit: Int!, skip: Int!): LikesPage!
  postId: String!
  postedBy: User
  postedById: String!
  text: String!
}

type ReplyLike {
  createdAt: DateTime!
  reply: Reply
  replyId: String!
  user: User
  userId: String!
}

type ReplyPage {
  id: String
  isNextPage: Boolean
  replies: [Reply]
}

type SavedPost {
  id: String!
  post: Post
  postId: String!
  savedAt: DateTime!
  savedBy: User
  savedById: String!
}

type SavedPostsPage {
  id: String
  isNextPage: Boolean
  posts: [Post]
}

type SearchResult {
  hashTag: Hashtag
  hashTagId: String
  id: String!
  user: User
  userId: String
}

type ShareList {
  chatId: String
  postId: String!
  text: String!
  userId: String
}

type ShareSearch {
  userId: String
}

enum Sort {
  asc
  desc
}

type Subscription {
  deletedMessage: Message
  newActivity: User
  newInboxMessage: Chat
  newMessage(chatId: String!): Message
  newPosts: Post
  readMessage: [Message]
  unreadMessageCount: User
}

type Tag {
  User: User!
  id: String!
  photoId: String!
  post: Post
  postId: String!
  userId: String!
  x: Int!
  y: Int!
}

input TagInputType {
  userId: String!
  username: String
  x: Float!
  y: Float!
}

type TagsPage {
  id: String!
  isNextPage: Boolean!
  posts: [Post]
}

type Upload {
  success: Boolean!
}

type User {
  acceptedChats: [Chat]!
  activityCounts: ActivityCount!
  bio: String
  chatRequestsCount: Int!
  counts: counts!
  email: String
  followedBy(limit: Int!, skip: Int!): UsersListPage
  following(limit: Int!, skip: Int!): UsersListPage
  fullName: String
  gender: String
  id: String!
  isCollection: Boolean!
  isFollowing: Boolean!
  isPrivate: Boolean!
  isRequested: Boolean!
  likes: [Like!]!
  mutualFollowers: MutualFollowers
  photoVersion: Int
  postsPage(limit: Int!, skip: Int!): PagedPosts
  tagged(limit: Int!, skip: Int!): TagsPage
  tokenVersion: Int!
  unreadCount: Int!
  url: String
  username: String!
}

type UserMini {
  fullName: String!
  id: String!
  isFollowing: Boolean!
  photoVersion: Int!
  username: String!
}

type UserSearch {
  createdAt: DateTime!
  searchedById: String!
  user: User
  userId: String!
}

type UsersListPage {
  id: String
  isNextPage: Boolean
  profiles: [User]
}

type commentCounts {
  likes: Int!
  replies: Int!
}

type confirmPassword {
  reset: Boolean!
}

type counts {
  followedBy: Int!
  follows: Int!
  id: ID
  media: Int!
}

type postCounts {
  comments: Int!
  commentsOnly: Int!
  likes: Int!
}

type sendReset {
  censoredEmail: String!
}

type verifyReset {
  verified: Boolean!
}